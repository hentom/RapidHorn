( set-logic HORN )
( declare-rel loc0 ( ( Array Int Int ) Int Int ) )
( declare-rel error ( ) )
( declare-rel loc1 ( ( Array Int Int ) Int Int ) )
( declare-rel loc2 ( ( Array Int Int ) Int Int Int ) )
( declare-rel loc3 ( ( Array Int Int ) Int Int Int ) )
( declare-rel loc4 ( ( Array Int Int ) Int Int Int ) )
( declare-rel loc5 ( ( Array Int Int ) Int Int Int ) )
( declare-rel loc6 ( ( Array Int Int ) Int Int Int ) )
( declare-rel loc7 ( ( Array Int Int ) Int Int Int Int ) )
( declare-rel loc8 ( ( Array Int Int ) Int Int Int Int ) )
( declare-rel loc9 ( ( Array Int Int ) Int Int Int Int ) )
( declare-rel loc10 ( ( Array Int Int ) Int Int Int Int ) )
( declare-rel loc11 ( ( Array Int Int ) Int Int Int Int ) )
( declare-var a ( Array Int Int )  )
( declare-var alength Int )
( declare-var v Int )
( declare-var i Int )
( declare-var j Int )
( rule ( loc0 a alength v ) )
( rule ( => ( and ( loc0 a alength v ) ( <= alength 0 ) ) ( loc1 a alength v ) ) )
( rule ( => ( loc1 a alength v ) ( loc2 a alength v 0 ) ) )
( rule ( => ( and ( loc2 a alength v i ) ( < i alength ) ) ( loc3 a alength v i ) ) )
( rule ( => ( loc3 a alength v i ) ( loc4 ( store a i v ) alength v i ) ) )
( rule ( => ( loc4 a alength v i ) ( loc5 a alength v ( + i 1 ) ) ) )
( rule ( => ( loc5 a alength v i ) ( loc2 a alength v i ) ) )
( rule ( => ( and ( loc2 a alength v i ) ( >= i alength ) ) ( loc6 a alength v i ) ) )
( rule ( => ( loc6 a alength v i ) ( loc7 a alength v i 0 ) ) )
( rule ( => ( and ( loc7 a alength v i j ) ( < j alength ) ) ( loc8 a alength v i j ) ) )
( rule ( => ( and ( loc8 a alength v i j ) ( = ( select a j ) v ) ) ( loc9 a alength v i j ) ) )
( rule ( => ( and ( loc8 a alength v i j ) (not ( = ( select a j ) v ) ) ) error ) )
( rule ( => ( loc9 a alength v i j ) ( loc10 a alength v i ( + j 1 ) ) ) )
( rule ( => ( loc10 a alength v i j ) ( loc7 a alength v i j ) ) )
( rule ( => ( and ( loc7 a alength v i j ) ( >= j alength ) ) ( loc11 a alength v i j ) ) )
( query error )
( query loc7 )
( query loc8 )
